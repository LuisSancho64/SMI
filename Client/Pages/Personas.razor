@page "/personas"
@inject SMI.Client.Services.PersonaService UserService
@inject ITipoDocumentoService TipoDocumentoService
@inject ICiudadService CiudadService
@using SMI.Shared.DTOs
@using System.ComponentModel.DataAnnotations

<h3>Gestión de Personas</h3>

<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">Filtros</h5>
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Tipo de Documento</label>
                <select class="form-select" @bind="filtroTipoDocumentoId">
                    <option value="0">Todos</option>
                    @foreach (var tipo in TiposDocumento)
                    {
                        <option value="@tipo.Id">@tipo.Nombre</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Número de Documento</label>
                <input type="text" class="form-control" @bind="filtroNumeroDocumento" placeholder="Ingrese número de documento" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary me-2" @onclick="AplicarFiltros">Buscar</button>
                <button class="btn btn-secondary" @onclick="LimpiarFiltros">Limpiar</button>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between mb-3">
    <button class="btn btn-success" @onclick="OpenCreateModal">
        <i class="bi bi-plus-circle"></i> Crear Persona
    </button>
    <div>
        <span class="me-2">Registros por página:</span>
        <select class="form-select form-select-sm d-inline-block w-auto" @bind="registrosPorPagina">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
        </select>
    </div>
</div>

<table class="table table-striped table-hover">
    <thead class="table-dark">
        <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Género</th>
            <th>Correo</th>
            <th>Fecha Nacimiento</th>
            <th>Tipo Documento</th>
            <th>Número Documento</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (UsuariosFiltrados.Any())
        {
            @foreach (var usuario in UsuariosPaginados)
            {
                <tr>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Apellido</td>
                    <td>@(usuario.Id_Genero == 1 ? "Masculino" : usuario.Id_Genero == 2 ? "Femenino" : "No definido")</td>
                    <td>@usuario.Correo</td>
                    <td>@usuario.FechaNacimiento?.ToShortDateString()</td>
                    <td>@(usuario.Documentos?.FirstOrDefault()?.TipoDocumentoNombre ?? "Sin documento")</td>
                    <td>@(usuario.Documentos?.FirstOrDefault()?.NumeroDocumento ?? "N/A")</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button @onclick="() => MostrarDetallesUsuario(usuario)"
                            class="btn btn-sm btn-info">
                                <i class="fas fa-eye"></i> Ver
                            </button>
                            <button class="btn btn-sm btn-warning" @onclick="@(() => OpenEditModal(usuario))">
                                <i class="bi bi-pencil"></i> Editar
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => ConfirmarEliminar(usuario))">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </div>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No se encontraron registros.</td>
            </tr>
        }
    </tbody>
</table>

@if (UsuariosFiltrados.Any())
{
    <div class="d-flex justify-content-between align-items-center">
        <div>
            Mostrando @((paginaActual - 1) * registrosPorPagina + 1) a @Math.Min(paginaActual * registrosPorPagina, UsuariosFiltrados.Count) de @UsuariosFiltrados.Count registros
        </div>
        <nav>
            <ul class="pagination">
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(1)">Primera</button>
                </li>
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual - 1)">Anterior</button>
                </li>

                @for (int i = Math.Max(1, paginaActual - 2); i <= Math.Min(totalPaginas, paginaActual + 2); i++)
                {
                    var pagina = i;
                    <li class="page-item @(pagina == paginaActual ? "active" : "")">
                        <button class="page-link" @onclick="() => CambiarPagina(pagina)">@pagina</button>
                    </li>
                }

                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual + 1)">Siguiente</button>
                </li>
                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(totalPaginas)">Última</button>
                </li>
            </ul>
        </nav>
    </div>
}

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg"> <!-- Aumenté el tamaño a modal-lg para más espacio -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((currentUser.Id == 0) ? "Crear Persona" : "Editar Persona")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nombre</label>
                                <input class="form-control" @bind="currentUser.Nombre" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Apellido</label>
                                <input class="form-control" @bind="currentUser.Apellido" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Género</label>
                                <select class="form-select" @bind="currentUser.Id_Genero">
                                    <option value="">Seleccione...</option>
                                    <option value="1">Masculino</option>
                                    <option value="2">Femenino</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Fecha Nacimiento</label>
                                <input type="date" class="form-control" @bind="currentUser.FechaNacimiento" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Correo</label>
                        <input type="email" class="form-control" @bind="currentUser.Correo" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Tipo Documento</label>
                                <select class="form-select" @bind="currentDocumento.TipoDocumentoId">
                                    <option value="">Seleccione...</option>
                                    @foreach (var tipo in TiposDocumento)
                                    {
                                        <option value="@tipo.Id">@tipo.Nombre</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Número Documento</label>
                                <input class="form-control" maxlength="10" @bind="currentDocumento.NumeroDocumento" />
                                @if (showError)
                                {
                                    <div class="text-danger mt-1">@errorMessage</div>
                                }
                            </div>
                        </div>
                    </div>
                    <!-- Sección de Provincia y Ciudad -->
                    <div class="card mb-3">
                        <div class="card-header">Lugar(es) de Residencia</div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Provincia</label>
                                        <select class="form-select" @bind="selectedProvinciaId">
                                            <option value="0">Seleccione una provincia</option>
                                            @foreach (var provincia in Provincias)
                                            {
                                                <option value="@provincia.Id">@provincia.Nombre</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Ciudad</label>
                                        @if (Ciudades.Any())
                                        {
                                            <select class="form-select" @bind="selectedCiudadId">
                                                <option value="0">Seleccione una ciudad</option>
                                                @foreach (var ciudad in Ciudades)
                                                {
                                                    <option value="@ciudad.Id">@ciudad.Nombre</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info mt-2">
                                                Seleccione una provincia primero
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <button type="button" class="btn btn-sm btn-outline-primary"
                            @onclick="AddCiudad" disabled="@(selectedCiudadId == 0)">
                                <i class="fas fa-plus"></i> Añadir Ciudad
                            </button>

                            @if (CiudadesSeleccionadas.Any())
                            {
                                <div class="mt-3">
                                    <h6>Ciudades seleccionadas:</h6>
                                    <ul class="list-group">
                                        @foreach (var ciudad in CiudadesSeleccionadas)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                @ciudad.Nombre
                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                @onclick="(() => RemoveCiudad(ciudad.Id))">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="SaveUser">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showConfirmDelete)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="() => showConfirmDelete = false"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar a @(usuarioAEliminar?.Nombre) @(usuarioAEliminar?.Apellido)?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showConfirmDelete = false">Cancelar</button>
                    <button class="btn btn-danger" @onclick="EliminarUsuario">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}
@if (showError)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-sm">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="btn-close" @onclick="() => showError = false"></button>
                </div>
                <div class="modal-body">
                    <p>@errorMessage</p>
                </div>
            </div>
        </div>
    </div>
}

@* Modal de detalles *@
@if (usuarioSeleccionado != null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-user-circle mr-2"></i>
                        Detalles del Usuario
                    </h5>
                    <button type="button"
                            class="btn btn-danger btn-sm"
                            style="border-radius: 50%; width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;"
                            @onclick="CerrarModalDetalles">
                        <span style="color: white; font-size: 20px;">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <i class="fas fa-id-card"></i> Información Personal
                                </div>
                                <div class="card-body">
                                    <dl class="row">
                                        <dt class="col-sm-4">Nombre:</dt>
                                        <dd class="col-sm-8">@usuarioSeleccionado.Nombre @usuarioSeleccionado.Apellido</dd>

                                        <dt class="col-sm-4">Género:</dt>
                                        <dd class="col-sm-8">@usuarioSeleccionado.GeneroNombre</dd>

                                        <dt class="col-sm-4">Edad:</dt>
                                        <dd class="col-sm-8">@usuarioSeleccionado.Edad años</dd>

                                        <dt class="col-sm-4">Fecha Nacimiento:</dt>
                                        <dd class="col-sm-8">@usuarioSeleccionado.FechaNacimiento?.ToString("dd/MM/yyyy")</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <i class="fas fa-envelope"></i> Contacto
                                </div>
                                <div class="card-body">
                                    <dl class="row">
                                        <dt class="col-sm-4">Correo:</dt>
                                        <dd class="col-sm-8">@usuarioSeleccionado.Correo</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Documentos *@
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <i class="fas fa-file-alt"></i> Documentos
                        </div>
                        <div class="card-body">
                            @if (usuarioSeleccionado.Documentos?.Any() == true)
                            {
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Tipo</th>
                                            <th>Número</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var doc in usuarioSeleccionado.Documentos)
                                        {
                                            <tr>
                                                <td>@doc.TipoDocumentoNombre</td>
                                                <td>@doc.NumeroDocumento</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <p class="text-muted">No hay documentos registrados</p>
                            }
                        </div>
                    </div>

                    @* Sección de Ciudades de Residencia *@
                    <div class="card mt-3">
                        <div class="card-header bg-light">
                            <i class="fas fa-map-marker-alt"></i> Ciudades de Residencia
                        </div>
                        <div class="card-body">
                            @if (usuarioSeleccionado.CiudadesResidencia != null && usuarioSeleccionado.CiudadesResidencia.Any())
                            {
                                <ul class="list-group">
                                    @foreach (var ciudad in usuarioSeleccionado.CiudadesResidencia)
                                    {
                                        <li class="list-group-item">
                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <i class="fas fa-city text-primary mr-2"></i>
                                                    <strong>@ciudad.Nombre</strong>
                                                </div>
                                                <span class="text-muted">@ciudad.NombreProvincia</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="alert alert-info mb-0">
                                    No se han registrado ciudades de residencia
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalDetalles">
                        <i class="fas fa-times"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private PersonaDto usuarioSeleccionado = null;

    private List<PersonaDto> Usuarios = new();
    private List<TipoDocumentoDto> TiposDocumento = new();

    private List<ProvinciaDto> Provincias = new();
    private List<CiudadDto> Ciudades = new List<CiudadDto>();
    private List<CiudadDto> CiudadesSeleccionadas = new List<CiudadDto>();
    private int _selectedProvinciaId = 0;
    private int selectedCiudadId = 0;

    private PersonaDto currentUser = new();
    private PersonaDocumentoDto currentDocumento = new();
    private bool showModal = false;

    private bool showError = false;
    private string errorMessage;

    // Variables para eliminación
    private bool showConfirmDelete = false;
    private PersonaDto usuarioAEliminar;

    // Variables para paginación
    private int paginaActual = 1;
    private int registrosPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)UsuariosFiltrados.Count / registrosPorPagina);

    // Variables para filtrado
    private int filtroTipoDocumentoId = 0;
    private string filtroNumeroDocumento = "";
    private List<PersonaDto> UsuariosFiltrados = new();

    private IEnumerable<PersonaDto> UsuariosPaginados =>
        UsuariosFiltrados
            .Skip((paginaActual - 1) * registrosPorPagina)
            .Take(registrosPorPagina);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private int selectedProvinciaId
    {
        get => _selectedProvinciaId;
        set
        {
            _selectedProvinciaId = value;
            _ = LoadCiudadesAsync(); // Llamar a LoadCiudades de forma asíncrona
        }
    }

    private async Task LoadData()
    {
        Usuarios = await UserService.GetUsuariosAsync();
        TiposDocumento = await TipoDocumentoService.GetTiposDocumentoAsync();
        Provincias = await CiudadService.ObtenerProvincias();

        if (currentUser.Id > 0)
        {
            // Cargar las ciudades seleccionadas para la persona editada
            CiudadesSeleccionadas = await CiudadService.ObtenerCiudadesPorPersona(currentUser.Id);

            // Si hay ciudades seleccionadas, cargar la provincia correspondiente
            if (CiudadesSeleccionadas.Any())
            {
                var primeraCiudad = await CiudadService.ObtenerCiudad(CiudadesSeleccionadas.First().Id);
                if (primeraCiudad != null)
                {
                    _selectedProvinciaId = primeraCiudad.IdProvincia;
                    await LoadCiudadesAsync();
                }
            }
        }

        AplicarFiltros();
    }

    private async Task MostrarDetallesUsuario(PersonaDto usuario)
    {
        try
        {
            var ciudades = await CiudadService.ObtenerCiudadesPorPersona(usuario.Id);

            // Reemplaza la sintaxis 'with' por esta:
            usuarioSeleccionado = new PersonaDto
                {
                    Id = usuario.Id,
                    Nombre = usuario.Nombre,
                    Apellido = usuario.Apellido,
                    FechaNacimiento = usuario.FechaNacimiento,
                    Correo = usuario.Correo,
                    Id_Genero = usuario.Id_Genero,
                    Documentos = usuario.Documentos,
                    CiudadesResidencia = ciudades ?? new List<CiudadDto>(),
                    GeneroNombre = usuario.Id_Genero switch
                    {
                        1 => "Masculino",
                        2 => "Femenino",
                        _ => "No especificado"
                    }
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar detalles: {ex.ToString()}");
        }
    }
    private void CerrarModalDetalles()
    {
        usuarioSeleccionado = null;
    }

    private async Task LoadCiudadesAsync()
    {
        if (_selectedProvinciaId > 0)
        {
            Ciudades = await CiudadService.ObtenerCiudadesPorProvincia(_selectedProvinciaId);
        }
        else
        {
            Ciudades = new List<CiudadDto>();
        }
        selectedCiudadId = 0;
        StateHasChanged();
    }

    private void AddCiudad()
    {
        if (selectedCiudadId > 0 && !CiudadesSeleccionadas.Any(c => c.Id == selectedCiudadId))
        {
            var ciudadToAdd = Ciudades.FirstOrDefault(c => c.Id == selectedCiudadId);
            if (ciudadToAdd != null)
            {
                CiudadesSeleccionadas.Add(ciudadToAdd);
                selectedCiudadId = 0;
            }
        }
    }

    private void RemoveCiudad(int ciudadId)
    {
        var ciudadToRemove = CiudadesSeleccionadas.FirstOrDefault(c => c.Id == ciudadId);
        if (ciudadToRemove != null)
        {
            CiudadesSeleccionadas.Remove(ciudadToRemove);
        }
    }

    private void AplicarFiltros()
    {
        UsuariosFiltrados = Usuarios.Where(u =>
            (filtroTipoDocumentoId == 0 ||
             u.Documentos?.Any(d => d.TipoDocumentoId == filtroTipoDocumentoId) == true) &&
            (string.IsNullOrWhiteSpace(filtroNumeroDocumento) ||
             u.Documentos?.Any(d => d.NumeroDocumento?.Contains(filtroNumeroDocumento, StringComparison.OrdinalIgnoreCase) == true) == true)
        ).ToList();

        paginaActual = 1;
    }

    private void LimpiarFiltros()
    {
        filtroTipoDocumentoId = 0;
        filtroNumeroDocumento = "";
        AplicarFiltros();
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas)
        {
            paginaActual = nuevaPagina;
        }
    }

    private void OpenCreateModal()
    {
        currentUser = new PersonaDto
            {
                FechaNacimiento = DateTime.Today,
                Documentos = new List<PersonaDocumentoDto>()
            };
        currentDocumento = new PersonaDocumentoDto();
        CiudadesSeleccionadas = new List<CiudadDto>();
        _selectedProvinciaId = 0;
        selectedCiudadId = 0;
        showModal = true;
    }

    private async Task OpenEditModal(PersonaDto usuario)
    {
        try
        {
            currentUser = new PersonaDto
                {
                    Id = usuario.Id,
                    Nombre = usuario.Nombre,
                    Apellido = usuario.Apellido,
                    Id_Genero = usuario.Id_Genero,
                    Correo = usuario.Correo,
                    FechaNacimiento = usuario.FechaNacimiento,
                    Documentos = usuario.Documentos?.ToList() ?? new List<PersonaDocumentoDto>()
                };

            currentDocumento = currentUser.Documentos.FirstOrDefault() ?? new PersonaDocumentoDto();

            // Cargar ciudades de residencia (maneja el caso de 404)
            CiudadesSeleccionadas = await CiudadService.ObtenerCiudadesPorPersona(currentUser.Id);

            // Si hay ciudades, cargar la provincia correspondiente
            if (CiudadesSeleccionadas.Any())
            {
                var primeraCiudadId = CiudadesSeleccionadas.First().Id;
                if (primeraCiudadId > 0)
                {
                    var primeraCiudad = await CiudadService.ObtenerCiudad(primeraCiudadId);

                    if (primeraCiudad != null)
                    {
						_selectedProvinciaId = primeraCiudad.IdProvincia;
						await LoadCiudadesAsync();
                    }
                }
            }
            
            showModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al abrir modal de edición: {ex.Message}");
        }
    }

    private void ConfirmarEliminar(PersonaDto usuario)
    {
        usuarioAEliminar = usuario;
        showConfirmDelete = true;
    }

    private async Task EliminarUsuario()
    {
        if (usuarioAEliminar != null)
        {
            await UserService.DeleteUsuarioAsync(usuarioAEliminar.Id);
            showConfirmDelete = false;
            await LoadData();
        }
    }

    private async Task SaveUser()
    {
        try
        {
            showError = false;

            // Validación de documento
            if (currentDocumento.TipoDocumentoId != 0 && !string.IsNullOrEmpty(currentDocumento.NumeroDocumento))
            {
                if (currentDocumento.TipoDocumentoId == 1 && !ValidarCedula(currentDocumento.NumeroDocumento))
                {
                    errorMessage = "Número de cédula inválido";
                    showError = true;
                    return;
                }

                currentUser.Documentos = new List<PersonaDocumentoDto>
            {
                new PersonaDocumentoDto
                {
                    PersonaId = currentUser.Id,
                    TipoDocumentoId = currentDocumento.TipoDocumentoId,
                    NumeroDocumento = currentDocumento.NumeroDocumento,
                    TipoDocumentoNombre = TiposDocumento
                        .FirstOrDefault(t => t.Id == currentDocumento.TipoDocumentoId)?.Nombre
                }
            };
            }

            // Guardar persona
            int personaId;
            if (currentUser.Id == 0)
            {
                var nuevaPersona = await UserService.CreateUsuarioAsync(currentUser);
                personaId = nuevaPersona.Id;
            }
            else
            {
                await UserService.UpdateUsuarioAsync(currentUser.Id, currentUser);
                personaId = currentUser.Id;
            }

            // Guardar ciudades de residencia solo si hay seleccionadas
            if (personaId > 0 && CiudadesSeleccionadas.Any(c => c.Id > 0))
            {
                var ciudadIds = CiudadesSeleccionadas
                    .Where(c => c.Id > 0)
                    .Select(c => c.Id)
                    .ToList();

                var resultado = await CiudadService.GuardarLugaresResidencia(personaId, ciudadIds);
                if (!resultado)
                {
                    errorMessage = "Error al guardar lugares de residencia";
                    showError = true;
                    return;
                }
            }

            await LoadData();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            showError = true;
            Console.WriteLine(errorMessage);
        }
    }

    private void CloseModal()
    {
        showModal = false;
        currentUser = new PersonaDto();
        currentDocumento = new PersonaDocumentoDto();
        CiudadesSeleccionadas = new List<CiudadDto>();
        _selectedProvinciaId = 0;
        selectedCiudadId = 0;
        showError = false;
    }

    private bool ValidarCedula(string cedula)
    {
        if (string.IsNullOrWhiteSpace(cedula) || cedula.Length != 10 || !cedula.All(char.IsDigit))
            return false;

        int provincia = int.Parse(cedula.Substring(0, 2));
        int tercerDigito = int.Parse(cedula.Substring(2, 1));

        if (provincia < 1 || provincia > 24 || tercerDigito >= 6)
            return false;

        int[] coeficientes = { 2, 1, 2, 1, 2, 1, 2, 1, 2 };
        int suma = 0;

        for (int i = 0; i < 9; i++)
        {
            int valor = coeficientes[i] * int.Parse(cedula[i].ToString());
            if (valor > 9)
                valor -= 9;
            suma += valor;
        }

        int digitoVerificador = (10 - (suma % 10)) % 10;

        return digitoVerificador == int.Parse(cedula[9].ToString());
    }

}